# -*- coding: utf-8 -*-
"""movie reccomendation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NEytodNY8PwWwj9S2LBJ35hyBypcBoTH
"""

# Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler, LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
import warnings
warnings.filterwarnings("ignore")

# 1. Data Collection & Cleaning
df = pd.read_csv("assessments.csv")
df['date'].fillna(df['date'].median(), inplace=True)
df.drop_duplicates(inplace=True)

# 2. Exploratory Data Analysis (EDA)
plt.figure(figsize=(6, 4))
sns.countplot(data=df, x='assessment_type')
plt.title("Distribution of Assessment Types")
plt.savefig("eda_assessment_type.png")
plt.close()

plt.figure(figsize=(6, 4))
sns.histplot(df['weight'], bins=10, kde=True)
plt.title("Distribution of Assessment Weights")
plt.savefig("eda_weight_distribution.png")
plt.close()

# 3. Feature Engineering
def assessment_phase(day):
    if day < 90:
        return "Early"
    elif day < 180:
        return "Mid"
    else:
        return "Late"

df['assessment_phase'] = df['date'].apply(assessment_phase)
le = LabelEncoder()
df['assessment_phase'] = le.fit_transform(df['assessment_phase'])
df = pd.get_dummies(df, columns=['assessment_type', 'code_module', 'code_presentation'], drop_first=True)
df['is_heavy'] = (df['weight'] >= 50).astype(int)
scaler = MinMaxScaler()
df['weight_norm'] = scaler.fit_transform(df[['weight']])

X = df.drop(columns=['weight', 'id_assessment'])
y = df['is_heavy']

# 4. Model Development
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# 5. Documentation & Reporting
report = classification_report(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
accuracy = accuracy_score(y_test, y_pred)

with open("model_report.txt", "w") as f:
    f.write("Classification Report:\n")
    f.write(report)
    f.write("\nConfusion Matrix:\n")
    f.write(str(conf_matrix))
    f.write("\nAccuracy Score: {:.2f}\n".format(accuracy))

# 6. Visualization of Results
plt.figure(figsize=(5, 4))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.savefig("confusion_matrix.png")
plt.close()